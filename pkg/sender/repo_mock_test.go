// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sender_test

import (
	"context"
	"github.com/dstotijn/hetty/pkg/reqlog"
	"github.com/dstotijn/hetty/pkg/scope"
	"github.com/dstotijn/hetty/pkg/sender"
	"github.com/oklog/ulid"
	"sync"
)

// Ensure, that RepoMock does implement sender.Repository.
// If this is not the case, regenerate this file with moq.
var _ sender.Repository = &RepoMock{}

// RepoMock is a mock implementation of sender.Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked sender.Repository
// 		mockedRepository := &RepoMock{
// 			DeleteSenderRequestsFunc: func(ctx context.Context, projectID ulid.ULID) error {
// 				panic("mock out the DeleteSenderRequests method")
// 			},
// 			FindSenderRequestByIDFunc: func(ctx context.Context, id ulid.ULID) (sender.Request, error) {
// 				panic("mock out the FindSenderRequestByID method")
// 			},
// 			FindSenderRequestsFunc: func(ctx context.Context, filter sender.FindRequestsFilter, scopeMoqParam *scope.Scope) ([]sender.Request, error) {
// 				panic("mock out the FindSenderRequests method")
// 			},
// 			StoreResponseLogFunc: func(ctx context.Context, reqLogID ulid.ULID, resLog reqlog.ResponseLog) error {
// 				panic("mock out the StoreResponseLog method")
// 			},
// 			StoreSenderRequestFunc: func(ctx context.Context, req sender.Request) error {
// 				panic("mock out the StoreSenderRequest method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires sender.Repository
// 		// and then make assertions.
//
// 	}
type RepoMock struct {
	// DeleteSenderRequestsFunc mocks the DeleteSenderRequests method.
	DeleteSenderRequestsFunc func(ctx context.Context, projectID ulid.ULID) error

	// FindSenderRequestByIDFunc mocks the FindSenderRequestByID method.
	FindSenderRequestByIDFunc func(ctx context.Context, id ulid.ULID) (sender.Request, error)

	// FindSenderRequestsFunc mocks the FindSenderRequests method.
	FindSenderRequestsFunc func(ctx context.Context, filter sender.FindRequestsFilter, scopeMoqParam *scope.Scope) ([]sender.Request, error)

	// StoreResponseLogFunc mocks the StoreResponseLog method.
	StoreResponseLogFunc func(ctx context.Context, reqLogID ulid.ULID, resLog reqlog.ResponseLog) error

	// StoreSenderRequestFunc mocks the StoreSenderRequest method.
	StoreSenderRequestFunc func(ctx context.Context, req sender.Request) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteSenderRequests holds details about calls to the DeleteSenderRequests method.
		DeleteSenderRequests []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProjectID is the projectID argument value.
			ProjectID ulid.ULID
		}
		// FindSenderRequestByID holds details about calls to the FindSenderRequestByID method.
		FindSenderRequestByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID ulid.ULID
		}
		// FindSenderRequests holds details about calls to the FindSenderRequests method.
		FindSenderRequests []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter sender.FindRequestsFilter
			// ScopeMoqParam is the scopeMoqParam argument value.
			ScopeMoqParam *scope.Scope
		}
		// StoreResponseLog holds details about calls to the StoreResponseLog method.
		StoreResponseLog []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ReqLogID is the reqLogID argument value.
			ReqLogID ulid.ULID
			// ResLog is the resLog argument value.
			ResLog reqlog.ResponseLog
		}
		// StoreSenderRequest holds details about calls to the StoreSenderRequest method.
		StoreSenderRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req sender.Request
		}
	}
	lockDeleteSenderRequests  sync.RWMutex
	lockFindSenderRequestByID sync.RWMutex
	lockFindSenderRequests    sync.RWMutex
	lockStoreResponseLog      sync.RWMutex
	lockStoreSenderRequest    sync.RWMutex
}

// DeleteSenderRequests calls DeleteSenderRequestsFunc.
func (mock *RepoMock) DeleteSenderRequests(ctx context.Context, projectID ulid.ULID) error {
	if mock.DeleteSenderRequestsFunc == nil {
		panic("RepoMock.DeleteSenderRequestsFunc: method is nil but Repository.DeleteSenderRequests was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ProjectID ulid.ULID
	}{
		Ctx:       ctx,
		ProjectID: projectID,
	}
	mock.lockDeleteSenderRequests.Lock()
	mock.calls.DeleteSenderRequests = append(mock.calls.DeleteSenderRequests, callInfo)
	mock.lockDeleteSenderRequests.Unlock()
	return mock.DeleteSenderRequestsFunc(ctx, projectID)
}

// DeleteSenderRequestsCalls gets all the calls that were made to DeleteSenderRequests.
// Check the length with:
//     len(mockedRepository.DeleteSenderRequestsCalls())
func (mock *RepoMock) DeleteSenderRequestsCalls() []struct {
	Ctx       context.Context
	ProjectID ulid.ULID
} {
	var calls []struct {
		Ctx       context.Context
		ProjectID ulid.ULID
	}
	mock.lockDeleteSenderRequests.RLock()
	calls = mock.calls.DeleteSenderRequests
	mock.lockDeleteSenderRequests.RUnlock()
	return calls
}

// FindSenderRequestByID calls FindSenderRequestByIDFunc.
func (mock *RepoMock) FindSenderRequestByID(ctx context.Context, id ulid.ULID) (sender.Request, error) {
	if mock.FindSenderRequestByIDFunc == nil {
		panic("RepoMock.FindSenderRequestByIDFunc: method is nil but Repository.FindSenderRequestByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  ulid.ULID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindSenderRequestByID.Lock()
	mock.calls.FindSenderRequestByID = append(mock.calls.FindSenderRequestByID, callInfo)
	mock.lockFindSenderRequestByID.Unlock()
	return mock.FindSenderRequestByIDFunc(ctx, id)
}

// FindSenderRequestByIDCalls gets all the calls that were made to FindSenderRequestByID.
// Check the length with:
//     len(mockedRepository.FindSenderRequestByIDCalls())
func (mock *RepoMock) FindSenderRequestByIDCalls() []struct {
	Ctx context.Context
	ID  ulid.ULID
} {
	var calls []struct {
		Ctx context.Context
		ID  ulid.ULID
	}
	mock.lockFindSenderRequestByID.RLock()
	calls = mock.calls.FindSenderRequestByID
	mock.lockFindSenderRequestByID.RUnlock()
	return calls
}

// FindSenderRequests calls FindSenderRequestsFunc.
func (mock *RepoMock) FindSenderRequests(ctx context.Context, filter sender.FindRequestsFilter, scopeMoqParam *scope.Scope) ([]sender.Request, error) {
	if mock.FindSenderRequestsFunc == nil {
		panic("RepoMock.FindSenderRequestsFunc: method is nil but Repository.FindSenderRequests was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Filter        sender.FindRequestsFilter
		ScopeMoqParam *scope.Scope
	}{
		Ctx:           ctx,
		Filter:        filter,
		ScopeMoqParam: scopeMoqParam,
	}
	mock.lockFindSenderRequests.Lock()
	mock.calls.FindSenderRequests = append(mock.calls.FindSenderRequests, callInfo)
	mock.lockFindSenderRequests.Unlock()
	return mock.FindSenderRequestsFunc(ctx, filter, scopeMoqParam)
}

// FindSenderRequestsCalls gets all the calls that were made to FindSenderRequests.
// Check the length with:
//     len(mockedRepository.FindSenderRequestsCalls())
func (mock *RepoMock) FindSenderRequestsCalls() []struct {
	Ctx           context.Context
	Filter        sender.FindRequestsFilter
	ScopeMoqParam *scope.Scope
} {
	var calls []struct {
		Ctx           context.Context
		Filter        sender.FindRequestsFilter
		ScopeMoqParam *scope.Scope
	}
	mock.lockFindSenderRequests.RLock()
	calls = mock.calls.FindSenderRequests
	mock.lockFindSenderRequests.RUnlock()
	return calls
}

// StoreResponseLog calls StoreResponseLogFunc.
func (mock *RepoMock) StoreResponseLog(ctx context.Context, reqLogID ulid.ULID, resLog reqlog.ResponseLog) error {
	if mock.StoreResponseLogFunc == nil {
		panic("RepoMock.StoreResponseLogFunc: method is nil but Repository.StoreResponseLog was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ReqLogID ulid.ULID
		ResLog   reqlog.ResponseLog
	}{
		Ctx:      ctx,
		ReqLogID: reqLogID,
		ResLog:   resLog,
	}
	mock.lockStoreResponseLog.Lock()
	mock.calls.StoreResponseLog = append(mock.calls.StoreResponseLog, callInfo)
	mock.lockStoreResponseLog.Unlock()
	return mock.StoreResponseLogFunc(ctx, reqLogID, resLog)
}

// StoreResponseLogCalls gets all the calls that were made to StoreResponseLog.
// Check the length with:
//     len(mockedRepository.StoreResponseLogCalls())
func (mock *RepoMock) StoreResponseLogCalls() []struct {
	Ctx      context.Context
	ReqLogID ulid.ULID
	ResLog   reqlog.ResponseLog
} {
	var calls []struct {
		Ctx      context.Context
		ReqLogID ulid.ULID
		ResLog   reqlog.ResponseLog
	}
	mock.lockStoreResponseLog.RLock()
	calls = mock.calls.StoreResponseLog
	mock.lockStoreResponseLog.RUnlock()
	return calls
}

// StoreSenderRequest calls StoreSenderRequestFunc.
func (mock *RepoMock) StoreSenderRequest(ctx context.Context, req sender.Request) error {
	if mock.StoreSenderRequestFunc == nil {
		panic("RepoMock.StoreSenderRequestFunc: method is nil but Repository.StoreSenderRequest was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req sender.Request
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockStoreSenderRequest.Lock()
	mock.calls.StoreSenderRequest = append(mock.calls.StoreSenderRequest, callInfo)
	mock.lockStoreSenderRequest.Unlock()
	return mock.StoreSenderRequestFunc(ctx, req)
}

// StoreSenderRequestCalls gets all the calls that were made to StoreSenderRequest.
// Check the length with:
//     len(mockedRepository.StoreSenderRequestCalls())
func (mock *RepoMock) StoreSenderRequestCalls() []struct {
	Ctx context.Context
	Req sender.Request
} {
	var calls []struct {
		Ctx context.Context
		Req sender.Request
	}
	mock.lockStoreSenderRequest.RLock()
	calls = mock.calls.StoreSenderRequest
	mock.lockStoreSenderRequest.RUnlock()
	return calls
}
